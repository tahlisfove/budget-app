version: '3.8'  # Version de la syntaxe Docker Compose

services:
  # Service Frontend Principal (application utilisateur)
  frontend:
    container_name: frontend_principal
    build:
      context: .  # Chemin du contexte de construction
      dockerfile: frontend/Dockerfile  # Dockerfile spécifique à ce frontend
    mem_limit: 2g  # Limite de mémoire pour ce conteneur
    ports:
      - "3017:80"  # Disponible sur localhost:3017
    depends_on:
      - backend  # Attend que le service `backend` soit prêt
      - auth  # Attend que le service `auth` soit prêt
    networks:
      - backend_network  # Connecte ce service au réseau partagé `backend_network`

  # Service Frontend Authentification (page de connexion utilisateur)
  login-frontend:
    container_name: frontend_login
    build:
      context: .  # Chemin du contexte de construction
      dockerfile: login-frontend/Dockerfile  # Dockerfile spécifique à ce frontend
    mem_limit: 2g  # Limite de mémoire pour ce conteneur
    ports:
      - "3000:80"  # Disponible sur localhost:3000
    depends_on:
      - auth  # Attend que le service `auth` soit prêt
    networks:
      - backend_network  # Connecte ce service au réseau partagé `backend_network`

  # Service Backend (API principale)
  backend:
    container_name: backend
    build:
      context: .  # Chemin du contexte de construction
      dockerfile: backend/Dockerfile  # Dockerfile spécifique au backend
    mem_limit: 2g  # Limite de mémoire pour ce conteneur
    ports:
      - "3001:3001"  # Disponible sur localhost:3001
    depends_on:
      - db  # Attend que le service `db` soit prêt
    environment:
      POSTGRES_USER: ${POSTGRES_USER}  # Utilisateur PostgreSQL, défini dans `.env`
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}  # Mot de passe PostgreSQL, défini dans `.env`
      POSTGRES_DB: ${POSTGRES_DB}  # Nom de la base, défini dans `.env`
    networks:
      - backend_network  # Connecte ce service au réseau partagé `backend_network`

  # Service de Base de Données PostgreSQL
  db:
    container_name: bdd
    image: postgres:13  # Utilise l'image officielle PostgreSQL version 13
    environment:  
      POSTGRES_USER: ${POSTGRES_USER}  # Utilisateur PostgreSQL, défini dans `.env`
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}  # Mot de passe PostgreSQL, défini dans `.env`
      POSTGRES_DB: ${POSTGRES_DB}  # Nom de la base, défini dans `.env`
    volumes:
      - db_data:/var/lib/postgresql/data  # Stocke les données dans un volume nommé
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql  # Exécute un script SQL à l'initialisation
    ports:
      - "5432:5432"  # Disponible sur localhost:5432
    networks:
      - backend_network  # Connecte ce service au réseau partagé `backend_network`

  # Service Nginx (Reverse Proxy)
  nginx:
    container_name: nginx
    image: nginx:latest  # Utilise l'image Nginx la plus récente
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf  # Monte la configuration personnalisée Nginx
    ports:
      - "8080:80"  # Expose le service sur le port 8080 local pour accéder au proxy
    depends_on:
      - frontend  # Attend que le service `frontend` soit prêt
      - backend  # Attend que le service `backend` soit prêt
      - login-frontend  # Attend que le service `login-frontend` soit prêt
    networks:
      - backend_network  # Connecte ce service au réseau partagé `backend_network`

  # Service d'Authentification (Google OAuth)
  auth:
    container_name: auth
    build:
      context: ./auth  # Construit à partir du dossier `auth`
    environment:
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}  # ID client Google, défini dans `.env`
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}  # Secret client Google, défini dans `.env`
    ports:
      - "3002:3002"  # Disponible sur localhost:3002
    depends_on:
      - backend  # Attend que le service `backend` soit prêt
    networks:
      - backend_network  # Connecte ce service au réseau partagé `backend_network`

# Configuration du réseau partagé entre tous les services
networks:
  backend_network:
    driver: bridge  # Utilise le pilote bridge par défaut pour interconnecter les conteneurs

# Définition des volumes pour persister les données
volumes:
  db_data:
    driver: local  # Volume local pour stocker les données PostgreSQL